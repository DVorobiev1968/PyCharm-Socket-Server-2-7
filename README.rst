Интеграция МДЭСПК и Beremiz
===========================
Общее описание
--------------
Проект клиент-серверного приложения реализующего интеграцию МДЭСПК и Beremiz.
Состоит из двух базовых классов:
    #. Server - многопоточный сервер технологических данных
    #. Client - клиентское приложение, с классом для доступа к мгновенному архиву технологических данных
Server
~~~~~~
Проект многопоточного сервера.
Релизован на Python 3.7.
С целью совместимости с Beremiz разработан класс SocketClient.py
Для тестирования используется SocketClient, вызвать приложение SocketClientApp.py
Класс совместим с вызовами из python 2.7.
Функциональные блоки реализованю в отдельных модулях Beremiz
Для сетевого взаимодействия используется телеграммы по подобию протокола CAN.
Модуль MesPacked содержит класс со структурой данных и методами формирования служебных телеграмм.
Модуль Nodes содержит класс для организации и управления краткосрочным хранилищем данных.
По умолчанию используются слдующие настройки: localhost, port=8889
Данные настройки можно изменить если указать их при запуске в качестве параметров, если параметры не указываются,
то они берутся по умолчанию.

Внесение изменений в проект
~~~~~~~~~~~~~~~~~~~~~~~~~~~
После внесения изменений сохраняемся в ветке ServerTech:
    #. git branch - смотрим все ветки, определяем какая является текущей (*)
    #. git checkout ServerTech - переключиться на требуемую если она не активна
    #. git commit -m 'текст комментария'
    #. git push ServerTech

Создание дистрибутива Ubuntu
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    #. python setup.py sdist - создание дистрибутива (указываем префикс 2,3 в зависимости от используемой версии python)
    #. virtualenv env - создаем окружение с именем env, в зависимости от версии python возможно venv
    #. source ./venv/bin/activate - активируем среду виртуального окружения
    #. python setup.py install - (deploy) устанавливаем проект  в установленное окружение env,
файл с именем <имя проекта>-<ver>-<py__>.egg сохраняется в /usr/local/lib/python__/dist-package/ (ServerTechData-1.1-py2.7.egg)
    #. cd /usr/local/lib/python__
    #. python -m easy_install ServerTechData-1.1-py2.7.egg - установка пакета for python 2.7
    #. python3 -m easy_install ServerTechData-1.1-py3.9.egg - установка пакета for python 3.9

Тестирование проекта
~~~~~~~~~~~~~~~~~~~~
Проект тестируется при запущенном ServerSocketApp.py.
    #. python setup.py test - тестируем проект
Тестирование проводится по созданию краткосрочного архива, по следующему алгоритму:
    #. Создается набор узлов, где ID-узла вычисляется случайным образом (10 иттераций), для проверки функции обновления узла, когда в случае повторения ID, обновлется только его значение
    #. В каждом узле создается 10 объектов по аналогии как указано в п.1
    #. Осуществляется поиск узла с ID 7, может быть выдано сообщение, что такого узла нет, в случае если в п.1 генератор не создал узел.

Тестирование проекта посредством макрокоманд
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Проект можно протестировать с применением установленных макрокоманд:
    #. source ./venv/bin/activate - активация среды окружения.
    #. serverTech - запуск сервера технологических данных, в отдельном терминале.
    #. beremiz - запуск имитатора Beremiz (с реализацией простейшего FB реализующего вычисление: <значение узла ID 2>= 0 - <значение узла ID 1>),
для работы требуется запуск Java-клиента, который будет изменять значение для узла ID 1, в отдельном терминале.
    #. test_node - запуск python-клиента для проверки работспособности serverTech.

Установка SocketServer
""""""""""""""""""""""
    1. mkdir <targetDir>
    2. cd <targetDir>
    3. git clone https://github.com/DVorobiev1968/PyCharm-Socket-Server-2-7.git
    4. если проект уже ранее был клонирован, то обновляемся до последней версии:
        1. git pull
    5. убедиться что установлен Python требуемой версии:
        1. python –version
    6. Версия должна быть не ниже 3 например: Python 3.7
    7. Запуск с параметрами по умолчанию:
        1. python ServerSocketApp.py
    8. Запуск с произвольными параметрами:
        1. python ServerSocketApp.py <host> <port>